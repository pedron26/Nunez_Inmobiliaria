@page "/clientes"
<h3>Clientes (@Clientes.Count)</h3>
<div class="mb-2">
    <button class="btn btn-success"
    @onclick="()=>{ShowForm = !ShowForm;}">
        Agregar
    </button>
</div>
<div class="container">
    @if (ShowForm)
    {
        <h3>@TituloForm</h3>
        <EditForm Model="request" OnValidSubmit="Send">
            <div class="mb-3 input-group">
                <label class="input-group-text">Nombre</label>
                <InputText class="form-control" @bind-Value="@request.Nombre"></InputText>
            </div>
            <div class="mb-3 input-group">
                <label class="input-group-text">Cedula</label>
                <InputText class="form-control" @bind-Value="@request.Cedula"></InputText>
            </div>
            <div class="mb-3 input-group">
                <label class="input-group-text">Telefono</label>
                <InputText class="form-control" @bind-Value="@request.Telefono"></InputText>
            </div>
            <div class="mb-3 input-group">
                <label class="input-group-text">Direccion</label>
                <InputText class="form-control" @bind-Value="@request.Direccion"></InputText>
            </div>
            <div class="btn-group">
                <button type="submit" class="btn btn-outline-success">Guardar</button>
                <button @onclick="Cancelar" class="btn btn-outline-danger">Cancelar</button>
            </div>
        </EditForm>
        <br />
    }
    @foreach (var cliente in Clientes)
    {
        <div class="card" style="width:18rem;">
            <div class="card-body">
                <label class="card-title">@cliente.Nombre</label>
                <div class="card-text">
                    <label><b>Telefono:</b>@cliente.Telefono</label>
                </div>
                <button @onclick="()=>Seleccionar(cliente.Id)" class="btn btn-warning">Editar</button>
                <button @onclick="()=>Eliminar(cliente)" class="btn btn-danger">Eliminar</button>
            </div>
        </div>
    }
</div>

@code {
    public string TituloForm => request.Id == 0 ?
      "Agregar cliente" : "Modificar cliente";
    public bool ShowForm { get; set; } = false;
    public string Filtro { get; set; } = "";
    public List<ClienteResponse> Clientes { get; set; }
        = new List<ClienteResponse>();

    public ClienteRequest request { get; set; } = new ClienteRequest();

    void Cancelar()
    {
        request = new ClienteRequest();
        ShowForm = false;
    }

    async Task CargarClientes()
    {
        var resultado = await ClienteServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Clientes = resultado.Data!;
        }


    }

    protected override async Task OnInitializedAsync()
    {
        await CargarClientes();
    }

    public async Task Send()
    {
        if (request.Id == 0)
        {
            //Debo registrar el clientereturn
            var r = await ClienteServices.Crear(request);
            if (r.Success)
            {
                Cancelar();
                await CargarClientes();
                StateHasChanged();
            }
        }
        else
        {
            //Debo solicitar modificar el cliente.
            var r = await ClienteServices.Modificar(request);
            if (r.Success)
            {
                Cancelar();
                await CargarClientes();
                StateHasChanged();
            }

        }
    }

    public void Seleccionar(int Id, bool showForm = true)
    {
        ShowForm = showForm;
        request = Clientes
       .Where(c => c.Id == Id).Select(c => c.ToRequest()).FirstOrDefault() ?? new ClienteRequest();
    }

    public async Task Eliminar(ClienteResponse cliente)
    {
        var resultado = await ClienteServices.Eliminar(cliente.ToRequest());
        if (resultado.Success)
        {
            await CargarClientes();
            StateHasChanged();
        }
    }

}

